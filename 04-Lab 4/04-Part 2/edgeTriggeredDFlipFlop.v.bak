module ALU(SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);

	input [9:0] SW;     //[7:5] for function inputs, [3:0] for Data A, [9] for reset_n
	input [0:0] KEY;
	output [7:0] LEDR;
	output [6:0] HEX0;  //HEX0 value of Date(A)
	output [6:0] HEX1;  //permantly off
	output [6:0] HEX2; 	//permanantly off
	output [6:0] HEX3;  //permantly off
	output [6:0] HEX4;  //4 least significant bits of register
	output [6:0] HEX5;  //4 most significant bits of register
	assign HEX1[6:0] = 7'b1111111;
	assign HEX2[6:0] = 7'b1111111;
	assign HEX3[6:0] = 7'b1111111;

	wire [4:0] addAToB;
	FourBitAdder FA1(.SW({2'b00, SW[7:0]}), .LEDR(addAToB[4:0]));

	wire [4:0] addOneToA;
	fourBitAdder FA2(.SW({2'b00, SW[7:4], 4'b0001}), .LEDR(addOneToA[4:0]));
	
	reg [7:0] ALUout;
	reg [7:0] register;
	wire [3:0] A;
		assign A[3:0] = SW[3:0];
	wire [3:0] B;
		assign B[3:0] = register[3:0];
    
	hex_decoder hex0(.SW(A[3:0]), .HEX(HEX0[6:0]));


	always @(*)
	begin
		case (SW[7:5])
			3'b000: ALUout[7:0] = {3'b000, addOneToA[4:0]};
			3'b001: ALUout[7:0] = {3'b000, addAToB[4:0]};
			3'b010: ALUout[7:0] = {3'b000, SW[7:4] + SW[3:0]};
			3'b011: ALUout[7:0] = {SW[7:4] | SW[3:0], SW[7:4] ^ SW[3:0]};
			3'b100: ALUout[7:0] = {7'b0000000, (|SW[7:0])};
			3'b101: ALUout[7:0] = SW[7:0];
			default: ALUout[7:0] = 8'b0000_0000;
		endcase
	end

	always @(posedge KEY[0])
	begin
		if (SW[9] == 1'b0)
			register[7:0] <= 8'b0000_0000;
		else
			register[7:0] <= ALUout[7:0];
	end

	assign LEDR[7:0] = ALUout[7:0];
	
	hex_decoder hex4(.SW(register[3:0]), .HEX(HEX4[6:0]));
	hex_decoder hex5(.SW(register[7:4]), .HEX(HEX5[6:0]));  

endmodule


module adder4(SW, LEDR);
    input [9:0] SW;
    output [4:0] LEDR;

    wire [2:0]tempCarry;

    FullAdder1Bit FA1(.a(SW[0]), .b(SW[4]), .ci(SW[9]), .s(LEDR[0]), .co(tempCarry[0]));
    FullAdder1Bit FA2(.a(SW[1]), .b(SW[5]), .ci(tempCarry[0]), .s(LEDR[1]), .co(tempCarry[1]));
    FullAdder1Bit FA3(.a(SW[2]), .b(SW[6]), .ci(tempCarry[1]), .s(LEDR[2]), .co(tempCarry[2]));
    FullAdder1Bit FA4(.a(SW[3]), .b(SW[7]), .ci(tempCarry[2]), .s(LEDR[3]), .co(LEDR[4]));
endmodule


module hexDecoder (SW, HEX);
	input [3:0] SW;
	output [6:0] HEX;

  	assign HEX[0] = ~SW[3] & ~SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & ~SW[1] & ~SW[0] |
			SW[3] & ~SW[2] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[1] & SW[0];

	assign HEX[1] = SW[2] & SW[1] & ~SW[0] |
			SW[3] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[0] |
			~SW[3] & SW[2] & ~SW[1] & SW[0];			

	assign HEX[2] = SW[3] & SW[2] & ~SW[0] |
			SW[3] & SW[2] & SW[1] |
			~SW[3] & ~SW[2] & SW[1] & ~SW[0];
					
	assign HEX[3] = SW[2] & SW[1] & SW[0] |
			~SW[3] & ~SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & ~SW[1] & ~SW[0] |
			SW[3] & ~SW[2] & SW[1] & ~SW[0];						

	assign HEX[4] = ~SW[3] & SW[0] |
			~SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & ~SW[1] |
			~SW[3] & SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & SW[1] & SW[0] |
			SW[3] & ~SW[2] & ~SW[1] & SW[0];

	assign HEX[5] = ~SW[3] & ~SW[2] & SW[0] |
			~SW[3] & ~SW[2] & SW[1] |
			~SW[3] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[1] & SW[0];

	assign HEX[6] = ~SW[3] & ~SW[2] & ~SW[1] |
			~SW[3] & SW[2] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[1] & ~SW[0];
endmodule

module fourBitAdder(SW, LEDR);
	input [9:0] SW;    
	output [4:0] LEDR; 
	wire [2:0] cable;

	fullAdder FA1(
		.a(SW[4]), 
		.b(SW[0]), 
		.cin(SW[9]), 
		.s(LEDR[0]),
		.cout(cable[0])
	);

	fullAdder FA2(
		.a(SW[5]), 
		.b(SW[1]), 
		.cin(cable[0]), 
		.s(LEDR[1]), 
		.cout(cable[1])
	);

	fullAdder FA3(
		.a(SW[6]), 
		.b(SW[2]), 
		.cin(cable[1]), 
		.s(LEDR[2]), 
		.cout(cable[2])
	);

	fullAdder FA4(
		.a(SW[7]), 
		.b(SW[3]), 
		.cin(cable[2]), 
		.s(LEDR[3]), 
		.cout(LEDR[4])
	);
endmodule

module fullAdder(a, b, cin, s, cout);
	input a;
	input b;
	input cin;
	output s;
	output cout;
	
	assign s = a^b^cin;
	assign cout = (a & b) | (cin & (a^b));

endmodule
