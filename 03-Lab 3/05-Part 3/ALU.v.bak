module ALU(SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
	input [7:0] SW;
	input [2:0] KEY;
	output [6:0] HEX0;
	output [6:0] HEX1;
	output [6:0] HEX2;
	output [6:0] HEX3;
	output [6:0] HEX4;
	output [6:0] HEX5;
	output [7:0] LEDR;

	wire [4:0] addAToB;
	fourBitAdder FA1(.SW({2'b00, SW[7:0]}), .LEDR(addAToB[4:0]));

	wire [4:0] addOneToA;
	fourBitAdder FA2(.SW({2'b00, SW[7:4], 4'b0001}), .LEDR(addOneToA[4:0]));

	reg [7:0] ALUout;
	always @(*)
	begin
		case (KEY[2:0])
			3'b000: ALUout[7:0] = {3'b000, addOneToA[4:0]};
			3'b001: ALUout[7:0] = {3'b000, addAToB[4:0]};
			3'b010: ALUout[7:0] = {3'b000, SW[7:4] + SW[3:0]};
			3'b011: ALUout[7:0] = {SW[7:4] | SW[3:0], SW[7:4] ^ SW[3:0]};
			3'b100: ALUout[7:0] = {7'b0000000, (|SW[7:0])};
			3'b101: ALUout[7:0] = SW[7:0];
			default: ALUout[7:0] = 8'b0000_0000;
		endcase
	end
	
	assign LEDR[7:0] = ALUout[7:0];
	hexDecoder hex0(.SW(SW[3:0]), .HEX(HEX0[6:0]));    //B
	hexDecoder hex2(.SW(SW[7:4]), .HEX(HEX2[6:0]));    //A
	hexDecoder hex1(.SW(4'b0000), .HEX(HEX1[6:0]));    //0000
	hexDecoder hex3(.SW(4'b0000), .HEX(HEX3[6:0]));    //0000
	hexDecoder hex4(.SW(ALUout[3:0]), .HEX(HEX4[6:0]));    //ALUout[3:0]
	hexDecoder hex5(.SW(ALUout[7:4]), .HEX(HEX5[6:0]));    //ALUout[7:4]
endmodule

module hexDecoder (SW, HEX);
	input [3:0] SW;
	output [6:0] HEX;

  	assign HEX[0] = ~SW[3] & ~SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & ~SW[1] & ~SW[0] |
			SW[3] & ~SW[2] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[1] & SW[0];

	assign HEX[1] = SW[2] & SW[1] & ~SW[0] |
			SW[3] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[0] |
			~SW[3] & SW[2] & ~SW[1] & SW[0];			

	assign HEX[2] = SW[3] & SW[2] & ~SW[0] |
			SW[3] & SW[2] & SW[1] |
			~SW[3] & ~SW[2] & SW[1] & ~SW[0];
					
	assign HEX[3] = SW[2] & SW[1] & SW[0] |
			~SW[3] & ~SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & ~SW[1] & ~SW[0] |
			SW[3] & ~SW[2] & SW[1] & ~SW[0];						

	assign HEX[4] = ~SW[3] & SW[0] |
			~SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & ~SW[1] |
			~SW[3] & SW[2] & ~SW[1] & SW[0] |
			~SW[3] & SW[2] & SW[1] & SW[0] |
			SW[3] & ~SW[2] & ~SW[1] & SW[0];

	assign HEX[5] = ~SW[3] & ~SW[2] & SW[0] |
			~SW[3] & ~SW[2] & SW[1] |
			~SW[3] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[1] & SW[0];

	assign HEX[6] = ~SW[3] & ~SW[2] & ~SW[1] |
			~SW[3] & SW[2] & SW[1] & SW[0] |
			SW[3] & SW[2] & ~SW[1] & ~SW[0];
endmodule

module fourBitAdder(SW, LEDR);
	input [9:9] SW;    
	output [4:0] LEDR; 
	wire [2:0] cable;

	fullAdder FA1(
		.a(SW[4]), 
		.b(SW[0]), 
		.cin(SW[9]), 
		.s(LEDR[0]),
		.cout(cable[0])
	);

	fullAdder FA2(
		.a(SW[5]), 
		.b(SW[1]), 
		.cin(cable[0]), 
		.s(LEDR[1]), 
		.cout(cable[1])
	);

	fullAdder FA3(
		.a(SW[6]), 
		.b(SW[2]), 
		.cin(cable[1]), 
		.s(LEDR[2]), 
		.cout(cable[2])
	);

	fullAdder FA4(
		.a(SW[7]), 
		.b(SW[3]), 
		.cin(cable[2]), 
		.s(LEDR[3]), 
		.cout(LEDR[4])
	);
endmodule

module fullAdder(a, b, cin, s, cout);
	input a;
	input b;
	input cin;
	output s;
	output cout;
	
	assign s = a^b^cin;
	assign cout = (a & b) | (cin & (a^b));

endmodule
